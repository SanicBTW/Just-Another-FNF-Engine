var fofStage;
var cityBG;
var lightBG;
var sonicDead;
var towerBG;
var zoomshit = 0;
var bfx;
var bfy;

var transparentColor = 0x00000000;
var blackColor = 0xFF000000;
var whiteColor = 0xFFFFFFFF;
var redColor = 0xFFFF0000;
var tweenTime = 1;

var blackFuck;
var startCircle;
var startText;

// fortinait o la bbg
var canIncrease = false;
var fear = 0;
var fearBBorder;
var fearBBG;
var fearBar;

function onCreate()
{
    stage.camera_settings.defaultZoom = 0.85;
    stage.camera_settings.offsets.opponent.setTo(20, -60);
    stage.camera_settings.speed = 1.5;
    stage.hide_girlfriend = true;
    stage.skip.defaultCountdown = true;
    stage.skip.healthCheck = true;

    stage.positions.boyfriend.setTo(150, 225);
    stage.positions.opponent.setTo(400, -160);

    GameOverSubstate.characterName = 'bf-starved-die';
    GameOverSubstate.deathSoundName = 'starved-death';
    GameOverSubstate.loopSoundName = 'starved-loop';
    GameOverSubstate.endSoundName = 'starved-retry';
    GameOverSubstate.snapCamera = true;

    cityBG = new FlxSprite(-100, 0, Paths.image('city'));
    cityBG.setGraphicSize(toInt32(cityBG.width * 1.5));
    cityBG.scrollFactor.set(1, 0.9);
    add(cityBG);

    towerBG = new FlxSprite(-100, 0, Paths.image('towers'));
    towerBG.setGraphicSize(toInt32(towerBG.width * 1.5));
    towerBG.scrollFactor.set(1, 0.9);
    add(towerBG);

    fofStage = new FlxSprite(-100, 0, Paths.image('stage'));
    fofStage.setGraphicSize(toInt32(fofStage.width * 1.5));
    fofStage.scrollFactor.set(1, 0.9);
    add(fofStage);

    sonicDead = new FlxSprite(0, 100, Paths.image('sonicisfuckingdead'));
    sonicDead.setGraphicSize(toInt32(sonicDead.width * 0.65));
    sonicDead.scrollFactor.set(1, 0.9);
    add(sonicDead);

	lightBG = new FlxSprite(-100, 0, Paths.image('light'));
	lightBG.setGraphicSize(toInt32(lightBG.width * 1.5));
	lightBG.scrollFactor.set(1, 0.9);
    lightBG.alpha = 0;
	add(lightBG);

    blackFuck = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, blackColor);
    startCircle = new FlxSprite();
    startText = new FlxSprite();

    fearBBorder = new FlxSprite(FlxG.width - 100, FlxG.height * 0.23, Paths.image('fearbar'));
    fearBBorder.scrollFactor.set();

    fearBBG = new FlxSprite(fearBBorder.x + 16, fearBBorder.y, Paths.image('fearbarBG'));
    fearBBG.angle = 0;
    fearBBG.scrollFactor.set();
    fearBBG.scale.set(0.60, 1);
    fearBBG.updateHitbox();

    fearBar = new SBar(fearBBG.x + 12, fearBBG.y + 16, toInt32(fearBBG.width), toInt32(fearBBG.height), transparentColor, redColor);
	fearBar.angle = 180;
	fearBar.scrollFactor.set();
	fearBar.scale.set(0.56, 0.90);
	fearBar.updateHitbox();
    fearBar.fillAxis = SBarFillAxis.VERTICAL;
}

function onStartCountdown()
{
    UI.add(fearBBorder);
    UI.add(fearBBG);
	UI.add(fearBar);

    PlayState.camDisp = 15;

    add(blackFuck);

    startCircle.loadGraphic(Paths.image('Circle-fight-or-flight'));
    startCircle.screenCenter();
    startCircle.scale.set(1.5, 1.5);
    startCircle.x += 777;
    add(startCircle);

    startText.loadGraphic(Paths.image("Text-fight-or-flight"));
    startText.screenCenter();
    startText.scale.set(1.5, 1.5);
    startText.x -= 1200;
    add(startText);

    new FlxTimer().start(0.6, function(tmr:FlxTimer)
    {
        FlxTween.tween(startCircle, {x: (FlxG.width - startCircle.width) / 2}, 0.5);
        FlxTween.tween(startText, {x: (FlxG.width - startText.width) / 2}, 0.5);
    });

    new FlxTimer().start(1.9, function(tmr:FlxTimer)
	{
		FlxTween.tween(startCircle, {alpha: 0}, 1, {onComplete: function(twn:FlxTween)
		{
			remove(startCircle);
		}});
		FlxTween.tween(startText, {alpha: 0}, 1, {onComplete: function(twn:FlxTween)
		{
			remove(startText);
		}});
		FlxTween.tween(blackFuck, {alpha: 0}, 1, {onComplete: function(twn:FlxTween)
		{
			remove(blackFuck);
		}});
	});

    UI.judgementOffset[0] = 455;
}

function onCreatePost()
{
    blackFuck.cameras = [camHUD];
    startCircle.cameras = [camHUD];
    startText.cameras = [camHUD];

    bfx = PlayState.boyfriendGroup.x;
    bfy = PlayState.boyfriendGroup.y;

    UI.refreshCounters(100);
    UI.fcFormat = " [fc]";
    UI.textFormat = "Sacrifices: $misses | Accuracy: $accuracy$fc";
    UI.scoreText.x = 0;
    UI.scoreText.y = (FlxG.height - 45) - 5;
    if (Settings.downScroll)
        UI.scoreText.y = 45;
    UI.scoreText.alignment = "center";
    UI.scoreText.size = 20;

    var i = 0;
    opponentStrums.visible = false;
    for(receptor in playerStrums.receptors.members)
	{
        var endX = ((FlxG.width / 2) - receptor.swagWidth / 2);
        endX += (i - ((4 - 1) / 2)) * receptor.swagWidth;

        FlxTween.tween(receptor, {x: endX}, (Conductor.crochet * 4) / 1000,
			{ease: FlxEase.circOut, startDelay: (Conductor.crochet / 1000) + ((Conductor.stepCrochet / 1000) * i)});

        receptor.setAlpha = 0.65;
        i++;
	}
}

function goodNoteHit()
{
    fear -= 0.001;
}

function noteMiss()
{
    fear += 0.005;
}

function opponentNoteHit()
{
    fear += 0.0015;
}

function onCountdownStarted()
{
    FlxTween.cancelTweensOf(UI);
    UI.alpha = 0;
}

function onSongStart()
{
    FlxTween.tween(UI, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
    canIncrease = true;
}

function onMoveCamera(who)
{
    switch(who)
    {
        case 'dad':
        {
            stage.camera_settings.defaultZoom = 1.15;
        }
        case 'boyfriend':
        {
            stage.camera_settings.defaultZoom = 0.85;
        }
    }
}

function onGameOverConfirm(isRestart)
{
    FlxG.camera.flash(redColor, 3, null, true);
    boyfriend_dead.visible = false;
}

function onUpdate(elapsed)
{
    zoomshit = camGame.zoom / 0.75;
    PlayState.boyfriend.scale.set(zoomshit, zoomshit);
    PlayState.boyfriend.x = bfx * zoomshit;
    PlayState.boyfriend.y = bfy * zoomshit;
    fearBar.value = fear;

    if (canIncrease)
    {
        // ok so this dumb bitch would return 1 UPON STATE CREATION LIKE WHAT THE ACTUAL FUCK BRO
        if (fearBar.percent >= 1)
        {
            Timings.health = 0;
            stage.skip.healthCheck = false;
        }
    }
}

function onStepHit()
{
    if (curStep == 1183 || curStep == 1472)
    {
        FlxTween.tween(lightBG, {alpha: 1}, tweenTime, {ease: FlxEase.quadInOut});
        FlxTween.color(sonicDead, tweenTime, whiteColor, redColor, {ease: FlxEase.quadInOut});

        FlxTween.tween(cityBG, {alpha: 0}, tweenTime, {ease: FlxEase.quadInOut});
        FlxTween.tween(towerBG, {alpha: 0}, tweenTime, {ease: FlxEase.quadInOut});
        FlxTween.tween(fofStage, {alpha: 0}, tweenTime, {ease: FlxEase.quadInOut});

        if (PlayState.SONG.song == "Lucha or funa")
            return;

		PlayState.boyfriend.colorTween = FlxTween.color(PlayState.boyfriend, tweenTime, whiteColor, redColor, {onComplete: function(twn:FlxTween) {
			PlayState.boyfriend.colorTween = null;
		}, ease: FlxEase.quadInOut});
    }
    else if (curStep == 1437 || curStep == 1982)
    {
        FlxTween.tween(lightBG, {alpha: 0}, tweenTime + 0.5, {ease: FlxEase.quadInOut});
        FlxTween.color(sonicDead, tweenTime + 0.5, redColor, whiteColor, {ease: FlxEase.quadInOut});
        
        FlxTween.tween(cityBG, {alpha: 1}, tweenTime + 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(towerBG, {alpha: 1}, tweenTime + 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(fofStage, {alpha: 1}, tweenTime + 0.5, {ease: FlxEase.quadInOut});
        
        if (PlayState.SONG.song == "Lucha or funa")
            return;

        PlayState.boyfriend.colorTween = FlxTween.color(PlayState.boyfriend, tweenTime, redColor, whiteColor, {onComplete: function(twn:FlxTween) {
			PlayState.boyfriend.colorTween = null;
		}, ease: FlxEase.quadInOut});
    }
}