var fofStage;
var cityBG;
var lightBG;
var sonicDead;
var towerBG;
var zoomshit = 0;
var bfx;
var bfy;

var whiteColor = 0xFFFFFFFF;
var redColor = 0xFFFF0000;
var conductorOGState;

function onCreate()
{
    stage.defaultCamZoom = 0.85;
    stage.hide_girlfriend = true;
    stage.boyfriend = [366.5, 400];
    stage.opponent = [672.5, 171.3];
    stage.camera_opponent = [20, -60];
    cityBG = new FlxSprite(-117, -65, Paths.image('city'));
    cityBG.setGraphicSize(Math.round(FlxG.width), Math.round(FlxG.height));
    cityBG.scale.set(1.25, 1.25);
    cityBG.antialiasing = true;
    cityBG.updateHitbox();
    cityBG.scrollFactor.set(0.5);
    cityBG.active = false;
    add(cityBG);

    towerBG = new FlxSprite(-117, -65, Paths.image('towers'));
    towerBG.setGraphicSize(Math.round(FlxG.width), Math.round(FlxG.height));
    towerBG.scale.set(1.25, 1.25);
    towerBG.antialiasing = true;
    towerBG.updateHitbox();
    towerBG.scrollFactor.set(0.5);
    towerBG.active = false;
    add(towerBG);

    fofStage = new FlxSprite(-117, -65, Paths.image('stage'));
    fofStage.setGraphicSize(Math.round(FlxG.width), Math.round(FlxG.height));
    fofStage.scale.set(1.25, 1.25);
    fofStage.antialiasing = true;
    fofStage.updateHitbox();
    fofStage.scrollFactor.set(0.5);
    fofStage.active = false;
    add(fofStage);

    sonicDead = new FlxSprite(325, 250, Paths.image('sonicisfuckingdead'));
    sonicDead.setGraphicSize(Math.round(FlxG.width), Math.round(FlxG.height));
    sonicDead.scale.set(0.5, 0.5);
    sonicDead.antialiasing = true;
    sonicDead.updateHitbox();
    sonicDead.scrollFactor.set(0.5);
    sonicDead.active = false;
    add(sonicDead);

	lightBG = new FlxSprite(-117, -65, Paths.image('light'));
	lightBG.setGraphicSize(Math.round(FlxG.width), Math.round(FlxG.height));
	lightBG.scale.set(1.25, 1.25);
	lightBG.antialiasing = true;
	lightBG.updateHitbox();
	lightBG.scrollFactor.set(0.5);
    lightBG.active = false;
	add(lightBG);

    conductorOGState = Conductor.speedBasedBPM;
    Conductor.speedBasedBPM = false;
}

function onCreatePost()
{
    bfx = boyfriend.x;
    bfy = boyfriend.y;

    UI.textFormat = "Sacrifices: $misses | Accuracy: $accuracy";
    UI.scoreText.x = 0;
    UI.scoreText.y = (FlxG.height - 45) - 5;
    UI.scoreText.alignment = "center";
    UI.updateText();

    var i = 0;
    opponentStrums.visible = false;
    for(receptor in playerStrums.receptors.members)
	{
        var endX = ((FlxG.width / 2) - receptor.swagWidth / 2);
        endX += (i - ((4 - 1) / 2)) * receptor.swagWidth;

        FlxTween.tween(receptor, {x: endX}, (Conductor.crochet * 4) / 1000,
			{ease: FlxEase.circOut, startDelay: (Conductor.crochet / 1000) + ((Conductor.stepCrochet / 1000) * i)});

        i++;
	}
}

function onEndSong()
{
    Conductor.speedBasedBPM = conductorOGState;
}

function onMoveCamera(who)
{
    switch(who)
    {
        case 'dad':
        {
            // disable the camera movement on starved
            PlayState.bfTurn = true;
            stage.defaultCamZoom = 1;
            for(receptor in playerStrums.receptors.members)
			{
                receptor.setAlpha = 0.25;
				FlxTween.tween(receptor, {alpha: receptor.setAlpha}, 0.1, { ease: FlxEase.linear});
			}
        }
        case 'boyfriend':
        {
            stage.defaultCamZoom = 0.85;
            for(receptor in playerStrums.receptors.members)
			{
                receptor.setAlpha = 0.8;
				FlxTween.tween(receptor, {alpha: receptor.setAlpha}, 0.1, { ease: FlxEase.linear});
			}
        }
    }
}

function onUpdate(elapsed)
{
    zoomshit = camGame.zoom / 0.75;
    boyfriend.scale.set(zoomshit, zoomshit);
    boyfriend.x = bfx * zoomshit;
    boyfriend.y = bfy * zoomshit;
}

function onStepHit()
{
    if (curStep == 1183 || curStep == 1472)
    {
        FlxTween.color(sonicDead, 0.5, whiteColor, redColor, {ease: FlxEase.quadInOut});
        
        FlxTween.tween(cityBG, {alpha: 0}, 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(towerBG, {alpha: 0}, 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(fofStage, {alpha: 0}, 0.5, {ease: FlxEase.quadInOut});

		boyfriend.colorTween = FlxTween.color(boyfriend, 0.5, whiteColor, redColor, {onComplete: function(twn:FlxTween) {
			boyfriend.colorTween = null;
		}, ease: FlxEase.quadInOut});
		dad.colorTween = FlxTween.color(dad, 0.5, whiteColor, redColor, {onComplete: function(twn:FlxTween) {
			dad.colorTween = null;
		}, ease: FlxEase.quadInOut});
    }
    else if (curStep == 1437 || curStep == 1982)
    {
        FlxTween.color(sonicDead, 0.5, redColor, whiteColor, {ease: FlxEase.quadInOut});
        
        FlxTween.tween(cityBG, {alpha: 1}, 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(towerBG, {alpha: 1}, 0.5, {ease: FlxEase.quadInOut});
        FlxTween.tween(fofStage, {alpha: 1}, 0.5, {ease: FlxEase.quadInOut});
        
        boyfriend.colorTween = FlxTween.color(boyfriend, 0.5, redColor, whiteColor, {onComplete: function(twn:FlxTween) {
			boyfriend.colorTween = null;
		}, ease: FlxEase.quadInOut});

		dad.colorTween = FlxTween.color(dad, 0.5, redColor, whiteColor, {onComplete: function(twn:FlxTween) {
			dad.colorTween = null;
		}, ease: FlxEase.quadInOut});
    }
}